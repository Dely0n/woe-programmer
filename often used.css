/* ПСЕВДОКЛАССЫ И ПСЕВДОЭЛЕМЕНТЫ 
========================================*/

.pseudo:active /* Момент активности, нажатия */
.pseudo:after /* Создает различные декоративные элементы после содержимого */
.pseudo:before /* Создает различные декоративные элементы до содержимого */
.pseudo:disabled /* Стилизует неактивные элементы */
.pseudo:empty /* Если элемент пустой */
.pseudo:focus /* Выделение формы */
.pseudo:hover /* При наведении на элемент */
.pseudo:required /* Стилизация обязательных форм элемента */
.pseudo:visited /* Посещеная ссылка */

/* A 
========================================*/

align-content {
    align-content:flex-start; /* Строки будут стремиться к началу контейнера */
    align-content: flex-end; /* Строки будут стремиться к концу контейнера */
    align-content: center; /* Строки будут выровнены по центру контейнера */
    align-content: space-between; /* Каждая строка займет необходимое ей пространство, оставшееся пространство появится между строк. Интервал между строк одинаков. Первая строка будет прижата к началу контейнера, последняя - к концу. */
    align-content: space-around; /* Интервал между каждой парой соседних строк одинаков. Пустое пространство до первого и после последнего элемента равно половине пространства между каждой парой соседних строк. */
    align-content: space-evenly; /* Интервал между каждой строк одинаков. */
    align-content: start; /* Строки grid контейнера будут стремиться к началу контейнера */
    align-content: end; /* Строки grid контейнера будут стремиться к концу контейнера */
    align-content: stretch; /* Неиспользуемое пространство контейнера равномерно распределяется по строкам контейнера так, чтобы строки занимали всю высоту контейнера */
}

align-items {
    align-items: stretch; /* Элементы flexbox / grid растянутся по всей поперечной оси */
    align-items: flex-start; /* Элементы flexbox выровнены в начале поперечной оси */
    align-items: flex-end; /* Элементы flexbox выровнены в конце поперечной оси */ 
    align-items: center; /* Элементы flexbox / grid выровнены в центре поперечной оси */
    align-items: start; /* Элементы grid выровнены в начале поперечной оси */
    align-items: end; /* Элементы grid выровнены в конце поперечной оси */
}

align-self {
    align-self: stretch; /* Элементы flexbox / grid растянутся по всей поперечной оси */
    align-self: flex-start; /* Размещает элемент в начале поперечной оси контейнера flexbox */
    align-self: flex-end; /* Размещает элемент в конце поперечной оси контейнера flexbox */
    align-self: center; /* Размещает элемент по центру поперечной оси контейнера flexbox / grid */
    align-self: start; /* Размещает элемент в начале поперечной оси контейнера flexbox / grid */
    align-self: end; /* Размещает элемент в конце поперечной оси контейнера flexbox / grid */
}

animation {
    animation: 2s fadeIn; /* Используя два параметра: длительность и название анимации. Эти два параметра обязательные. */
    animation: 2s bgAnim, 2s fadeOut 2s; /* Несколько анимаций для элемента, перечисляем через запятую */
        /* Используем все свойства. Название анимации можно указывать либо в начале либо в конце. Остальные параметры нужно указывать в определенном порядке */ animation-duration, animation-timing-function, animation-delay, animation-iteration-count, animation-direction, animation-fill-mode и animation-play-state. /* Неуказанные параметры будут принимать значения по умолчанию. */
}

animation-delay {
    animation-delay: 1s; /* Задержка в указанных единицах. Возможные единицы: s, ms */
    animation-delay: -500ms; /* Отрицательная задержка. Анимация начинается так, как если бы она уже проигрывалась в течение 500 мс. */
    animation-delay: 1s, 2s; /* Задержка старта анимации для разных анимаций элемента, если их указано несколько в animation-name */
}
animation-direction {
    animation-direction: normal; /* Анимация проигрывается только вперед. После окончания анимации элемент принимает начальную позицию анимации */
    animation-direction: reverse; /* Анимация проигрывается в обратном направлении, с конечного положения в начальное. После окончания анимации элемент принимает конечную позицию анимации */
    animation-direction: alternate; /* Анимация проигрывается сначала вперед, потом назад */
    animation-direction: alternate-reverse; /* Анимация проигрывается с конечного положения в начальное, а потом обратно */
    animation-direction: alternate, reverse; /* Направление анимации для разных анимаций элемента, если их указано несколько в animation-name */
}

animation-duration {
    animation-duration: 1s; /* Длительность анимации в указанных единицах. Возможные единицы: s, ms */
    animation-duration: 1s, 2s; /* Длительность анимации для разных анимаций элемента, если их указано несколько в animation-name */
}

animation-fill-mode {
    animation-fill-mode: none; /* Стили анимации не будут применены к элементу до и после ее выполнения */
    animation-fill-mode: forwards; /* По окончании анимации элемент сохранит стили последнего ключевого кадра */
    animation-fill-mode: backwards; /* Стили анимации первого кадра будут применены элементу до ее запуска */
    animation-fill-mode: both; /* Стили к элементу применяются до и после воспроизведения анимации, как если бы значения forwards и backwards были заданы одновременно */ 
    animation-fill-mode: forwards, backwards; /* Применяет свойство animation-fill-mode для разных анимаций элемента, если их указано несколько в animation-name */
}

animation-iteration-count {
    animation-iteration-count: 2; /* Число циклов анимации. Любое целое или дробное число. По умолчанию 1 */
    animation-iteration-count: infinite; /* Анимация повторяется бесконечно */
    animation-iteration-count: 2.5, infinite; /* Количество циклов анимации для разных анимаций элемента, если их указано несколько в animation-name */
}

animation-name {
    animation-name: none; /* Отключает анимацию */
    animation-name: Name1; /* Имя анимации */
    animation-name: Name1, Name2; /* Список нескольких анимаций */
}

animation-play-state {
    animation-play-state: running; /* Анимация проигрывается */
    animation-play-state: paused; /* Анимация поставлена на паузу */
    animation-play-state: paused, running; /* Состояние для разных анимаций элемента, если их указано несколько в animation-name */
}

animation-timing-function {
    
}